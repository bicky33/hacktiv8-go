// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: socialMedia.query.sql

package repositories

import (
	"context"
	"time"
)

const deleteSocialMedia = `-- name: DeleteSocialMedia :exec
DELETE FROM SocialMedias WHERE id = $1
`

func (q *Queries) DeleteSocialMedia(ctx context.Context, id uint32) error {
	_, err := q.db.ExecContext(ctx, deleteSocialMedia, id)
	return err
}

const getSocialMedia = `-- name: GetSocialMedia :many
SELECT 
    socialmedia.id, socialmedia.name, socialmedia.social_media_url, socialmedia.user_id, socialmedia.created_at, socialmedia.updated_at, 
    users.id, 
    users.username
FROM SocialMedias as socialMedia 
JOIN Users as users ON users.id = socialMedia.user_id
`

type GetSocialMediaRow struct {
	ID             uint32
	Name           string
	SocialMediaUrl string
	UserID         uint32
	CreatedAt      time.Time
	UpdatedAt      time.Time
	ID_2           uint32
	Username       string
}

func (q *Queries) GetSocialMedia(ctx context.Context) ([]GetSocialMediaRow, error) {
	rows, err := q.db.QueryContext(ctx, getSocialMedia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSocialMediaRow
	for rows.Next() {
		var i GetSocialMediaRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SocialMediaUrl,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSocialMediaById = `-- name: GetSocialMediaById :one
SELECT id, name, social_media_url, user_id, created_at, updated_at FROM SocialMedias WHERE id = $1
`

func (q *Queries) GetSocialMediaById(ctx context.Context, id uint32) (Socialmedia, error) {
	row := q.db.QueryRowContext(ctx, getSocialMediaById, id)
	var i Socialmedia
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SocialMediaUrl,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertSocialMedia = `-- name: InsertSocialMedia :one
INSERT INTO SocialMedias (name, social_media_url, user_id) VALUES ($1, $2, $3) 
RETURNING id, name, social_media_url, user_id, created_at
`

type InsertSocialMediaParams struct {
	Name           string
	SocialMediaUrl string
	UserID         uint32
}

type InsertSocialMediaRow struct {
	ID             uint32
	Name           string
	SocialMediaUrl string
	UserID         uint32
	CreatedAt      time.Time
}

func (q *Queries) InsertSocialMedia(ctx context.Context, arg InsertSocialMediaParams) (InsertSocialMediaRow, error) {
	row := q.db.QueryRowContext(ctx, insertSocialMedia, arg.Name, arg.SocialMediaUrl, arg.UserID)
	var i InsertSocialMediaRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SocialMediaUrl,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const updateSocialMedia = `-- name: UpdateSocialMedia :one
UPDATE SocialMedias SET name = $1, social_media_url = $2, updated_at = NOW() 
WHERE id = $3 
RETURNING id, name, social_media_url, user_id, updated_at
`

type UpdateSocialMediaParams struct {
	Name           string
	SocialMediaUrl string
	ID             uint32
}

type UpdateSocialMediaRow struct {
	ID             uint32
	Name           string
	SocialMediaUrl string
	UserID         uint32
	UpdatedAt      time.Time
}

func (q *Queries) UpdateSocialMedia(ctx context.Context, arg UpdateSocialMediaParams) (UpdateSocialMediaRow, error) {
	row := q.db.QueryRowContext(ctx, updateSocialMedia, arg.Name, arg.SocialMediaUrl, arg.ID)
	var i UpdateSocialMediaRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SocialMediaUrl,
		&i.UserID,
		&i.UpdatedAt,
	)
	return i, err
}
